name: deploy

on:
  push:
    paths:
      - '.github/workflows/**'
      - 'backend/src/**'
      - 'backend/build.gradle'
      - 'backend/settings.gradle'
      - 'backend/Dockerfile'
    branches:
      - main

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    outputs:
      owner_lc: ${{ steps.export_owner.outputs.owner_lc }}
      image_name: ${{ steps.export_image.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET }}
        run: echo "$APPLICATION_SECRET" > backend/src/main/resources/application-secret.yml

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2

      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        id: export_owner
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: export image name
        id: export_image
        run: echo "image_name=app250418" >> $GITHUB_OUTPUT

      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: true
          no-cache: true
          tags: |
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/${{ steps.export_image.outputs.image_name }}:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ steps.export_owner.outputs.owner_lc }}/${{ steps.export_image.outputs.image_name }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 현재 active / standby 인스턴스 조회
      - name: Get Active and Standby IDs
        id: get_instances
        run: |
          ACTIVE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Role,Values=active" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)

          STANDBY_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Role,Values=standby" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)

          echo "ACTIVE_ID=$ACTIVE_ID" >> $GITHUB_ENV
          echo "STANDBY_ID=$STANDBY_ID" >> $GITHUB_ENV
          echo "Current Active = $ACTIVE_ID"
          echo "Current Standby = $STANDBY_ID"

      # 1. Standby 인스턴스에 배포
      - name: Deploy to Standby
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.STANDBY_ID }}
          working-directory: /
          comment: Deploy to Standby
          command: |
            docker pull ghcr.io/${{ needs.buildImageAndPush.outputs.owner_lc }}/${{ needs.buildImageAndPush.outputs.image_name }}:latest && \
            docker stop app 2>/dev/null || true && \
            docker rm app 2>/dev/null || true && \
            docker run -d --name app --network common -p 8080:8080 \
              ghcr.io/${{ needs.buildImageAndPush.outputs.owner_lc }}/${{ needs.buildImageAndPush.outputs.image_name }}:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true

      # 2. 태그 전환
      - name: Switch Active/Standby
        run: |
          echo "Switching roles..."
          aws ec2 delete-tags --resources ${{ env.ACTIVE_ID }} --tags Key=Role,Value=active
          aws ec2 create-tags --resources ${{ env.ACTIVE_ID }} --tags Key=Role,Value=standby

          aws ec2 delete-tags --resources ${{ env.STANDBY_ID }} --tags Key=Role,Value=standby
          aws ec2 create-tags --resources ${{ env.STANDBY_ID }} --tags Key=Role,Value=active
          echo "Switched successfully!"
