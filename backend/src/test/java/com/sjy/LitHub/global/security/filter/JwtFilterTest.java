package com.sjy.LitHub.global.security.filter;

import com.sjy.LitHub.TestContainerConfig;
import com.sjy.LitHub.account.entity.authenum.Role;
import com.sjy.LitHub.global.exception.custom.InvalidTokenException;
import com.sjy.LitHub.global.security.service.TokenService;
import com.sjy.LitHub.global.security.util.AuthConst;
import com.sjy.LitHub.global.security.util.JwtUtil;
import com.sjy.LitHub.global.security.util.RedisBlacklistUtil;
import com.sjy.LitHub.global.security.util.RedisRefreshTokenUtil;
import jakarta.servlet.http.Cookie;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.mock.web.MockFilterChain;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@ActiveProfiles("test")
@TestInstance(TestInstance.Lifecycle.PER_METHOD)
@AutoConfigureMockMvc
public class JwtFilterTest extends TestContainerConfig {

    @Autowired
    private RedisBlacklistUtil redisBlacklistUtil;

    @Autowired
    private RedisRefreshTokenUtil redisRefreshTokenUtil;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private TokenService tokenService;

    private JwtFilter jwtFilter;

    @Autowired
    @Qualifier("StringRedisTemplate")
    private RedisTemplate<String, String> redisTemplate;

    private String validAccessToken;
    private String expiredAccessToken;
    private String validRefreshToken;
    private String blacklistedToken;
    private String invalidToken;
    private static final String TEST_INVALID_REFRESH_TOKEN = "invalid-refresh-token";

    @BeforeEach
    public void setUp() {
        jwtFilter = new JwtFilter(redisBlacklistUtil, tokenService, jwtUtil);

        Long testUserId = 1L;
        Role testUserRole = Role.ROLE_USER;

        validAccessToken = jwtUtil.createJwt(AuthConst.TOKEN_TYPE_ACCESS, testUserId, testUserRole, AuthConst.ACCESS_EXPIRATION);
        validRefreshToken = jwtUtil.createJwt(AuthConst.TOKEN_TYPE_REFRESH, testUserId, testUserRole, AuthConst.REFRESH_EXPIRATION);
        expiredAccessToken = jwtUtil.createJwt(AuthConst.TOKEN_TYPE_ACCESS, testUserId, testUserRole, 1);

        blacklistedToken = jwtUtil.createJwt(AuthConst.TOKEN_TYPE_ACCESS, testUserId + 1, testUserRole, AuthConst.ACCESS_EXPIRATION);
        redisBlacklistUtil.addToBlacklist(blacklistedToken, AuthConst.ACCESS_EXPIRATION);
        redisRefreshTokenUtil.addRefreshToken(testUserId, validRefreshToken, AuthConst.REFRESH_EXPIRATION);

        invalidToken = "invalid.jwt.token";
    }

    @AfterEach
    public void tearDown() {
        if (redisTemplate != null && redisTemplate.getConnectionFactory() != null) {
            try (RedisConnection connection = redisTemplate.getConnectionFactory().getConnection()) {
                connection.serverCommands().flushAll();
            }
        }
    }

    @Test
    @DisplayName("Ï†ïÏÉÅÏ†ÅÏù∏ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞ ÏöîÏ≤≠ ÌÜµÍ≥º")
    public void testValidAccessToken() throws Exception {
        Cookie accessTokenCookie = new Cookie(AuthConst.TOKEN_TYPE_ACCESS, validAccessToken);
        System.out.println("üöÄ [TEST] Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ïø†ÌÇ§ Í∞í: " + accessTokenCookie.getValue());

        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(accessTokenCookie)
                        .with(csrf()))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("JWT ÌïÑÌÑ∞ - Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Ïãú ÏòàÏô∏Í∞Ä Ï†ÅÏ†àÌûà Ï≤òÎ¶¨ÎêòÎäîÏßÄ ÌôïÏù∏")
    void testJwtFilterWithInvalidRefreshToken() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(new Cookie(AuthConst.TOKEN_TYPE_REFRESH, TEST_INVALID_REFRESH_TOKEN));

        MockHttpServletResponse response = new MockHttpServletResponse();
        MockFilterChain filterChain = new MockFilterChain();
        jwtFilter.doFilter(request, response, filterChain);

        assertEquals(HttpStatus.UNAUTHORIZED.value(), response.getStatus());
        assertNotNull(request.getAttribute("exception"));
        assertInstanceOf(InvalidTokenException.class, request.getAttribute("exception"));
    }

    @Test
    @DisplayName("ÎßåÎ£åÎêú ÌÜ†ÌÅ∞Ïù¥Î©¥ Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏÉà ÌÜ†ÌÅ∞ Î∞úÍ∏â Î∞è ÏöîÏ≤≠ ÌóàÏö©")
    public void testExpiredToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_ACCESS, expiredAccessToken))
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_REFRESH, validRefreshToken))
                        .with(csrf()))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("Î∏îÎûôÎ¶¨Ïä§Ìä∏Ïóê Îì±Î°ùÎêú ÌÜ†ÌÅ∞ ÏÇ¨Ïö© Ïãú 401 Unauthorized Î∞òÌôò")
    public void testBlacklistedToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_ACCESS, blacklistedToken))
                        .with(csrf()))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @DisplayName("Î≥ÄÏ°∞Îêú ÌÜ†ÌÅ∞ ÏÇ¨Ïö© Ïãú 401 Unauthorized Î∞òÌôò")
    public void testInvalidToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_ACCESS, invalidToken))
                        .with(csrf()))
                .andExpect(status().isUnauthorized())
                .andExpect(result -> {
                    String responseBody = result.getResponse().getContentAsString();
                    System.out.println("ÏùëÎãµ Î≥∏Î¨∏: " + responseBody);
                });
    }

    @Test
    @DisplayName("Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÏóÜÏù¥ ÏöîÏ≤≠ Ïãú 401 Unauthorized Î∞òÌôò")
    public void testRequestWithoutAccessToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .with(csrf()))
                .andExpect(status().isUnauthorized())
                .andExpect(result -> {
                    String responseBody = result.getResponse().getContentAsString();
                    System.out.println("ÏùëÎãµ Î≥∏Î¨∏: " + responseBody);
                });
    }

    @Test
    @DisplayName("ÎßåÎ£åÎêú Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Îßå ÏûàÍ≥† Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏùÑ Í≤ΩÏö∞ 401 Unauthorized Î∞òÌôò")
    public void testExpiredAccessTokenWithoutRefreshToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_ACCESS, expiredAccessToken))
                        .with(csrf()))
                .andExpect(status().isUnauthorized())
                .andExpect(result -> {
                    String responseBody = result.getResponse().getContentAsString();
                    System.out.println("ÏùëÎãµ Î≥∏Î¨∏: " + responseBody);
                });
    }

    @Test
    @DisplayName("ÏûòÎ™ªÎêú ÌòïÏãùÏùò Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ï≤òÎ¶¨")
    public void testInvalidFormatAccessToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_ACCESS, "invalid-format-token"))
                        .with(csrf()))
                .andExpect(status().isUnauthorized())
                .andExpect(result -> {
                    String responseBody = result.getResponse().getContentAsString();
                    System.out.println("ÏùëÎãµ Î≥∏Î¨∏: " + responseBody);
                });
    }

    @Test
    @DisplayName("ÎßåÎ£åÎêú Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Í≥º Ïú†Ìö®Ìïú Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÉà ÌÜ†ÌÅ∞ Î∞úÍ∏â")
    public void testValidRefreshTokenForNewAccessToken() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/api/user/me")
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_ACCESS, expiredAccessToken))
                        .cookie(new Cookie(AuthConst.TOKEN_TYPE_REFRESH, validRefreshToken))
                        .with(csrf()))
                .andExpect(status().isOk())
                .andExpect(result -> {
                    String responseBody = result.getResponse().getContentAsString();
                    System.out.println("ÏùëÎãµ Î≥∏Î¨∏: " + responseBody);
                });
    }

}