/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/user/reading-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 독서 기록 저장
         * @description 독서 시간을 추가하고 독서 연속 기록(streak)과 색상 레벨(colorLevel)을 갱신합니다.
         */
        post: operations["saveReadingRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 프로필 이미지 업로드
         * @description 사용자가 프로필 이미지를 업로드합니다. 기존 프로필 이미지는 덮어쓰기됩니다.
         */
        post: operations["uploadProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 계정 삭제
         * @description 로그인한 사용자의 계정을 논리 삭제 처리합니다.
         */
        post: operations["deleteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/friends/{receiverId}/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 친구 요청 보내기
         * @description 다른 사용자에게 친구 요청을 보냅니다.
         */
        post: operations["sendFriendRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 코드 검증 */
        post: operations["verifyEmailCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/social-signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 소셜 간편 회원가입
         * @description 회원가입의 경우 두 가지로 나뉩니다. 해당 컨트롤러는 소셜 간편 회원가입 입니다.
         */
        post: operations["completeSignup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 자체 회원가입
         * @description 회원가입의 경우 두 가지로 나뉩니다. 해당 컨트롤러는 자체 회원가입 입니다.
         */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/send-email-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 코드 전송 */
        post: operations["sendEmailVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/restore-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 계정 복구
         * @description deleteAt에 값이 있었던 회원을 다시 null 값으로 되돌립니다.
         */
        post: operations["restoreUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/check-nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 닉네임 검증
         * @description 길이 및 빈값 검증을 합니다.
         */
        post: operations["checkNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 닉네임 수정
         * @description 중복조회 및 형식 검사를 한 후 닉네임을 수정하는 기능입니다.
         */
        patch: operations["updateNickName"];
        trace?: never;
    };
    "/api/user/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 비밀번호 수정
         * @description 비밀번호 확인 후, 비밀번호 변경
         */
        patch: operations["updatePassword"];
        trace?: never;
    };
    "/api/friends/{requestId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 친구 요청 수락
         * @description 받은 친구 요청을 수락합니다.
         */
        patch: operations["acceptFriendRequest"];
        trace?: never;
    };
    "/api/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 정보 조회
         * @description 특정 사용자의 프로필을 조회합니다.
         */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 조회
         * @description 현재 로그인된 사용자 정보 및 독서 기록 조회합니다.
         */
        get: operations["getMyProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info/temp-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 상태 확인
         * @description 임시 회원가입 절차 시, 임시 토큰의 만료여부 확인합니다
         */
        get: operations["checkTempToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 상태 확인
         * @description 현재 사용자의 인증 상태를 확인합니다.
         */
        get: operations["checkAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/friends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 친구 목록 조회
         * @description 현재 로그인한 사용자의 친구 목록을 조회합니다.
         */
        get: operations["getFriendList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/friends/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 받은 친구 요청 목록 조회
         * @description 현재 로그인한 사용자가 받은 친구 요청 목록을 조회합니다.
         */
        get: operations["getPendingFriendRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 프로필 이미지 삭제
         * @description 사용자의 프로필 이미지를 기본 이미지로 변경합니다.
         */
        delete: operations["deleteProfileImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/friends/{requestId}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 친구 요청 거절
         * @description 받은 친구 요청을 거절합니다.
         */
        delete: operations["rejectFriendRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/friends/{friendId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 친구 삭제
         * @description 등록된 친구를 삭제합니다.
         */
        delete: operations["deleteFriend"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponseMyPageResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["MyPageResponseDTO"];
        };
        MonthlyReadingStatsResponseDTO: {
            /** Format: int32 */
            year: number;
            /** Format: int32 */
            month: number;
            /** Format: int32 */
            totalReadingTime: number;
            /** Format: int32 */
            readingCount: number;
            /** Format: double */
            averageReadingTime: number;
            mostFrequent?: boolean;
        };
        MyPageResponseDTO: {
            userProfile: components["schemas"]["UserProfileResponseDTO"];
            readingStats: components["schemas"]["ReadingStatsResponseDTO"];
        };
        ReadingRecordResponseDTO: {
            /** Format: date */
            date: string;
            /** Format: int32 */
            colorLevel: number;
        };
        ReadingStatsResponseDTO: {
            /** Format: int32 */
            readingStreak: number;
            readingRecords: components["schemas"]["ReadingRecordResponseDTO"][];
            monthlyStats: components["schemas"]["MonthlyReadingStatsResponseDTO"][];
        };
        UserProfileResponseDTO: {
            /** Format: int64 */
            userId: number;
            email: string;
            nickname: string;
            profileImageUrlLarge: string;
            /** @enum {string} */
            tier: "BRONZE" | "SILVER" | "GOLD" | "PLATINUM";
            /** Format: int32 */
            point: number;
        };
        BaseResponseMapStringString: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: {
                [key: string]: string;
            };
        };
        BaseResponseEmpty: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["Empty"];
        };
        Empty: Record<string, never>;
        EmailAuthVerificationDTO: {
            email: string;
            code: string;
        };
        SocialSignupDTO: {
            nickName: string;
            userPassword: string;
        };
        SignupDTO: {
            nickName: string;
            userEmail: string;
            userPassword: string;
        };
        EmailAuthDTO: {
            email: string;
        };
        NicknameRequestDTO: {
            nickName: string;
        };
        PasswordUpdateRequestDTO: {
            currentPassword: string;
            newPassword: string;
        };
        BaseResponseListFriendListResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["FriendListResponseDTO"][];
        };
        FriendListResponseDTO: {
            /** Format: int64 */
            userId: number;
            nickName: string;
            profileImageUrlSmall: string;
            /** @enum {string} */
            tier: "BRONZE" | "SILVER" | "GOLD" | "PLATINUM";
            /** Format: int32 */
            point: number;
        };
        BaseResponseListFriendRequestResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["FriendRequestResponseDTO"][];
        };
        FriendRequestResponseDTO: {
            /** Format: int64 */
            requestId: number;
            requesterNickName: string;
            requesterProfileImageUrl: string;
            /** Format: date-time */
            createdAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    saveReadingRecord: {
        parameters: {
            query: {
                minutes: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    uploadProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMapStringString"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    sendFriendRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receiverId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    verifyEmailCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailAuthVerificationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    completeSignup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialSignupDTO"];
            };
        };
        responses: {
            /** @description 회원가입 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
            /** @description 임시 토큰이 만료되었습니다. 프론트엔드는 로그인 페이지로 리다이렉트해야 합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    sendEmailVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailAuthDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    restoreUser: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    checkNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateNickName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    acceptFriendRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                requestId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    getMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    checkTempToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    checkAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    getFriendList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListFriendListResponseDTO"];
                };
            };
        };
    };
    getPendingFriendRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListFriendRequestResponseDTO"];
                };
            };
        };
    };
    deleteProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    rejectFriendRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                requestId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    deleteFriend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                friendId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
}
