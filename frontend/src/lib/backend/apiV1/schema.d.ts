/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/user/reading-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 독서 기록 저장
         * @description 독서 시간을 추가하고 독서 연속 기록과 색상 레벨을 갱신합니다.
         */
        post: operations["saveReadingRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 프로필 이미지 업로드
         * @description 사용자가 프로필 이미지를 업로드합니다. 기존 프로필 이미지는 덮어쓰기됩니다.
         */
        post: operations["uploadProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 계정 삭제
         * @description 로그인한 사용자의 계정을 논리 삭제 처리합니다.
         */
        post: operations["deleteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 생성
         * @description 제목, 본문, 썸네일 fileName 과 태그를 포함한 게시글을 생성합니다.
         */
        post: operations["createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/scrap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 스크랩 토글
         * @description 게시글에 스크랩을 토글합니다.
         */
        post: operations["toggleScrap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 좋아요 토글
         * @description 게시글에 좋아요를 토글합니다.
         */
        post: operations["toggleLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 썸네일 이미지 업로드
         * @description 게시글 썸네일 이미지를 업로드하고 fileName 과 URL 을 반환합니다.
         */
        post: operations["uploadThumbnail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 마크다운 이미지 업로드
         * @description 마크다운 본문에 삽입할 임시 이미지를 업로드합니다.
         */
        post: operations["uploadMarkdownImage"];
        /**
         * 마크다운 이미지 삭제
         * @description 마크다운 본문에 삽입된 임시 이미지를 삭제합니다.
         */
        delete: operations["deleteMarkdownImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/comments/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 댓글 작성
         * @description 게시글에 댓글을 작성합니다. 대댓글도 지원됩니다.
         */
        post: operations["createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/{followeeId}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 팔로우 토글
         * @description 해당 사용자를 팔로우하거나 언팔로우합니다.
         */
        post: operations["toggleFollow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 코드 검증 */
        post: operations["verifyEmailCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/social-signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 소셜 간편 회원가입
         * @description 회원가입의 경우 두 가지로 나뉩니다. 해당 컨트롤러는 소셜 간편 회원가입 입니다.
         */
        post: operations["completeSignup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 자체 회원가입
         * @description 회원가입의 경우 두 가지로 나뉩니다. 해당 컨트롤러는 자체 회원가입 입니다.
         */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/send-email-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 코드 전송 */
        post: operations["sendEmailVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/restore-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 계정 복구
         * @description deleteAt에 값이 있었던 회원을 다시 null 값으로 되돌립니다.
         */
        post: operations["restoreUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/check-nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 닉네임 검증
         * @description 길이 및 빈값 검증을 합니다.
         */
        post: operations["checkNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 닉네임 수정
         * @description 중복조회 및 형식 검사를 한 후 닉네임을 수정하는 기능입니다.
         */
        patch: operations["updateNickName"];
        trace?: never;
    };
    "/api/user/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 비밀번호 수정
         * @description 비밀번호 확인 후, 비밀번호 변경
         */
        patch: operations["updatePassword"];
        trace?: never;
    };
    "/api/posts/{postId}/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 게시글 썸네일 수정 */
        patch: operations["updateThumbnail"];
        trace?: never;
    };
    "/api/posts/{postId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 게시글 제목/본문 수정 */
        patch: operations["updatePostContent"];
        trace?: never;
    };
    "/api/posts/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 댓글 삭제
         * @description 본인의 댓글을 삭제합니다.
         */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        /**
         * 댓글 수정
         * @description 본인의 댓글을 수정합니다.
         */
        patch: operations["updateComment"];
        trace?: never;
    };
    "/api/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 정보 조회
         * @description 특정 사용자의 프로필을 조회합니다.
         */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 조회
         * @description 현재 로그인된 사용자 정보 및 독서 기록 조회합니다.
         */
        get: operations["getMyProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 상세 조회
         * @description postId를 기반으로 게시글을 상세 조회합니다.
         */
        get: operations["getPostDetail"];
        put?: never;
        post?: never;
        /**
         * 게시글 삭제
         * @description 해당 게시글을 삭제합니다.
         */
        delete: operations["deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 기반 게시글 검색
         * @description 태그 기준으로 게시글을 검색합니다.
         */
        get: operations["searchByTag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 키워드 기반 게시글 검색
         * @description 제목 기준으로 게시글을 검색합니다.
         */
        get: operations["searchByKeyword"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/scraps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 스크랩한 게시글 조회
         * @description 내가 스크랩한 게시글 목록을 조회합니다.
         */
        get: operations["getScrappedPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일간 인기 게시글 조회
         * @description 좋아요 + 스크랩 기준으로 인기 게시글을 정렬합니다.
         */
        get: operations["getPopularPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/popular/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 실시간 인기 태그 조회
         * @description ZSet 기반으로 상위 10개의 인기 태그를 반환합니다.
         */
        get: operations["getPopularTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/popular/keywords": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 실시간 인기 검색어 조회
         * @description ZSet 기반으로 상위 10개의 인기 검색어를 반환합니다.
         */
        get: operations["getPopularKeywords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/mine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내가 작성한 게시글 조회
         * @description 내가 작성한 게시글 목록을 조회합니다.
         */
        get: operations["getMyPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFollowerFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/comments/post/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 댓글 계층 조회
         * @description 게시글의 댓글과 대댓글을 계층 구조로 조회합니다.
         */
        get: operations["getCommentTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info/temp-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 상태 확인
         * @description 임시 회원가입 절차 시, 임시 토큰의 만료여부 확인합니다
         */
        get: operations["checkTempToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 상태 확인
         * @description 현재 사용자의 인증 상태를 확인합니다.
         */
        get: operations["checkAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/followings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로잉 목록 조회
         * @description 내가 팔로우한 사용자 목록을 조회합니다.
         */
        get: operations["getFollowings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로워 목록 조회
         * @description 나를 팔로우한 사용자 목록을 조회합니다.
         */
        get: operations["getFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 프로필 이미지 삭제
         * @description 사용자의 프로필 이미지를 기본 이미지로 변경합니다.
         */
        delete: operations["deleteProfileImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/followers/{followerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 팔로워 삭제
         * @description 내 팔로워 목록에서 특정 사용자를 제거합니다.
         */
        delete: operations["removeFollower"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponseMyPageResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["MyPageResponseDTO"];
        };
        MonthlyReadingStatsResponseDTO: {
            /** Format: int32 */
            year: number;
            /** Format: int32 */
            month: number;
            /** Format: int32 */
            totalReadingTime: number;
            /** Format: int32 */
            readingCount: number;
            /** Format: double */
            averageReadingTime: number;
            mostFrequent?: boolean;
        };
        MyPageResponseDTO: {
            userProfile: components["schemas"]["UserProfileResponseDTO"];
            readingStats: components["schemas"]["ReadingStatsResponseDTO"];
        };
        ReadingRecordResponseDTO: {
            /** Format: date */
            date: string;
            /** Format: int32 */
            colorLevel: number;
        };
        ReadingStatsResponseDTO: {
            /** Format: int32 */
            readingStreak: number;
            readingRecords: components["schemas"]["ReadingRecordResponseDTO"][];
            monthlyStats: components["schemas"]["MonthlyReadingStatsResponseDTO"][];
        };
        UserProfileResponseDTO: {
            /** Format: int64 */
            userId: number;
            nickname: string;
            profileImageUrlLarge: string;
            /** @enum {string} */
            tier: "BRONZE" | "SILVER" | "GOLD" | "PLATINUM";
            /** Format: int32 */
            point: number;
        };
        BaseResponseString: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: string;
        };
        BaseResponseEmpty: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["Empty"];
        };
        Empty: Record<string, never>;
        PostCreateRequestDTO: {
            title: string;
            contentMarkdown: string;
            tags: string[];
            thumbnailFileName: string;
        };
        BaseResponseLong: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            /** Format: int64 */
            result: number;
        };
        BaseResponseScrapResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["ScrapResponseDTO"];
        };
        ScrapResponseDTO: {
            scrapped?: boolean;
            /** Format: int64 */
            scrapCount?: number;
        };
        BaseResponseLikeResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["LikeResponseDTO"];
        };
        LikeResponseDTO: {
            liked?: boolean;
            /** Format: int64 */
            likeCount?: number;
        };
        BaseResponseUploadImageResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["UploadImageResponseDTO"];
        };
        UploadImageResponseDTO: {
            url?: string;
            fileName?: string;
        };
        CommentCreateRequestDTO: {
            content?: string;
            /** Format: int64 */
            parentId?: number;
        };
        BaseResponseCommentResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["CommentResponseDTO"];
        };
        CommentResponseDTO: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: int32 */
            depth?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            userProfileImageUrl?: string;
        };
        EmailAuthVerificationDTO: {
            email: string;
            code: string;
        };
        SocialSignupDTO: {
            nickName: string;
            userPassword: string;
        };
        SignupDTO: {
            nickName: string;
            userEmail: string;
            userPassword: string;
        };
        EmailAuthDTO: {
            email: string;
        };
        NicknameRequestDTO: {
            nickName: string;
        };
        PasswordUpdateRequestDTO: {
            currentPassword: string;
            newPassword: string;
        };
        PostContentUpdateDTO: {
            title?: string;
            contentMarkdown?: string;
        };
        BaseResponsePostDetailResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PostDetailResponseDTO"];
        };
        PostDetailResponseDTO: {
            /** Format: int64 */
            postId?: number;
            title?: string;
            contentMarkdown?: string;
            authorNickname?: string;
            /** Format: int64 */
            likeCount?: number;
            /** Format: int64 */
            scrapCount?: number;
            /** Format: int64 */
            commentCount?: number;
            liked?: boolean;
            scrapped?: boolean;
            editable?: boolean;
            /** Format: date-time */
            createdAt?: string;
            thumbnailImageUrl?: string;
            profileImageUrl?: string;
            tagNames?: string[];
            popular?: boolean;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        BaseResponsePageResponsePostSummaryResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PageResponsePostSummaryResponseDTO"];
        };
        PageResponsePostSummaryResponseDTO: {
            content?: components["schemas"]["PostSummaryResponseDTO"][];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            last?: boolean;
        };
        PostSummaryResponseDTO: {
            /** Format: int64 */
            postId?: number;
            title?: string;
            /** Format: int64 */
            userId?: number;
            authorNickname?: string;
            /** Format: int64 */
            likeCount?: number;
            /** Format: int64 */
            scrapCount?: number;
            /** Format: int64 */
            commentCount?: number;
            /** Format: date-time */
            createdAt?: string;
            thumbnailImageUrl?: string;
            profileImageUrl?: string;
            liked?: boolean;
            scrapped?: boolean;
            tagNames?: string[];
        };
        BaseResponseListPopularKeywordResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PopularKeywordResponseDTO"][];
        };
        PopularKeywordResponseDTO: {
            keyword?: string;
        };
        BaseResponseListCommentTreeDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["CommentTreeDTO"][];
        };
        CommentTreeDTO: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: int32 */
            depth?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            userProfileImageUrl?: string;
        };
        BaseResponsePageResponseFollowListResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PageResponseFollowListResponseDTO"];
        };
        FollowListResponseDTO: {
            /** Format: int64 */
            userId: number;
            nickName: string;
            profileImageUrlSmall: string;
            /** @enum {string} */
            tier: "BRONZE" | "SILVER" | "GOLD" | "PLATINUM";
            /** Format: int32 */
            point: number;
        };
        PageResponseFollowListResponseDTO: {
            content?: components["schemas"]["FollowListResponseDTO"][];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            last?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    saveReadingRecord: {
        parameters: {
            query: {
                minutes: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    uploadProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseString"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseLong"];
                };
            };
        };
    };
    toggleScrap: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseScrapResponseDTO"];
                };
            };
        };
    };
    toggleLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseLikeResponseDTO"];
                };
            };
        };
    };
    uploadThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseUploadImageResponseDTO"];
                };
            };
        };
    };
    uploadMarkdownImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseString"];
                };
            };
        };
    };
    deleteMarkdownImage: {
        parameters: {
            query: {
                fileName: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    createComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseCommentResponseDTO"];
                };
            };
        };
    };
    toggleFollow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                followeeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    verifyEmailCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailAuthVerificationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    completeSignup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialSignupDTO"];
            };
        };
        responses: {
            /** @description 회원가입 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
            /** @description 임시 토큰이 만료되었습니다. 프론트엔드는 로그인 페이지로 리다이렉트해야 합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    sendEmailVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailAuthDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    restoreUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    checkNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateNickName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateThumbnail: {
        parameters: {
            query?: {
                isPopular?: boolean;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    thumbnail: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updatePostContent: {
        parameters: {
            query?: {
                isPopular?: boolean;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostContentUpdateDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseCommentResponseDTO"];
                };
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: {
                year?: number;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    getMyProfile: {
        parameters: {
            query?: {
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    getPostDetail: {
        parameters: {
            query?: {
                isPopular?: boolean;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePostDetailResponseDTO"];
                };
            };
        };
    };
    deletePost: {
        parameters: {
            query?: {
                isPopular?: boolean;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    searchByTag: {
        parameters: {
            query: {
                tag: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    searchByKeyword: {
        parameters: {
            query: {
                keyword: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getScrappedPosts: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getPopularPosts: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getPopularTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListPopularKeywordResponseDTO"];
                };
            };
        };
    };
    getPopularKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListPopularKeywordResponseDTO"];
                };
            };
        };
    };
    getMyPosts: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getFollowerFeed: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getCommentTree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListCommentTreeDTO"];
                };
            };
        };
    };
    checkTempToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    checkAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    getFollowings: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponseFollowListResponseDTO"];
                };
            };
        };
    };
    getFollowers: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponseFollowListResponseDTO"];
                };
            };
        };
    };
    deleteProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseString"];
                };
            };
        };
    };
    removeFollower: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                followerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
}
