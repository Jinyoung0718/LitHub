/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/user/profile/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 프로필 이미지 업로드
         * @description 사용자가 프로필 이미지를 업로드합니다. 기존 프로필 이미지는 덮어쓰기됩니다.
         */
        post: operations["uploadProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 계정 삭제
         * @description 로그인한 사용자의 계정을 논리 삭제 처리합니다.
         */
        post: operations["deleteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/timer/single": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 개인 타이머 종료 후 기록 저장
         * @description 싱글 타이머 종료 후 독서 기록을 저장합니다.
         */
        post: operations["savePersonalReadingRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/timer/room/{roomId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디룸 타이머 종료
         * @description 대표 사용자만 타이머를 종료할 수 있습니다.
         */
        post: operations["stopGroupTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/timer/room/{roomId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디룸 타이머 시작
         * @description 대표 사용자가 타이머를 시작하면 같은 방 사용자들에게 공유됩니다.
         */
        post: operations["startGroupTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/timer/room/{roomId}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디룸 타이머 재시작
         * @description 대표 사용자만 타이머를 재시작할 수 있습니다.
         */
        post: operations["resumeGroupTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/timer/room/{roomId}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디룸 타이머 일시정지
         * @description 대표 사용자만 타이머를 일시정지할 수 있습니다.
         */
        post: operations["pauseGroupTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/timer/room/{roomId}/heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디룸 하트비트
         * @description  방장만 유효하며, 클라이언트는 약 10초 간격으로 호출하세요. 서버는 하트비트를 TTL 30초로 관리하며, 방장의 하트비트가 끊기면 타이머가 만료됩니다.
         */
        post: operations["heartbeat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 생성
         * @description 제목, 본문, 썸네일 storageKey 및 태그를 포함한 게시글을 생성합니다.
         */
        post: operations["createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/scraps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 스크랩 토글
         * @description 게시글에 스크랩을 토글합니다.
         */
        post: operations["toggleScrap"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 게시글 좋아요 토글
         * @description 게시글에 좋아요를 토글합니다.
         */
        post: operations["toggleLike"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{postId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 루트 댓글 조회 (페이징)
         * @description 게시글의 루트 댓글을 페이징으로 조회합니다.
         */
        get: operations["getRootComments"];
        put?: never;
        /**
         * 댓글 작성
         * @description 게시글에 댓글을 작성합니다. 대댓글도 지원됩니다.
         */
        post: operations["createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 썸네일 이미지 업로드
         * @description 게시글 썸네일 이미지를 업로드하고 URL 과 storageKey 를 반환합니다.
         */
        post: operations["uploadThumbnail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 마크다운 이미지 업로드
         * @description 마크다운 본문에서 사용할 임시 이미지를 업로드하고 퍼블릭 URL 과 storageKey 를 반환합니다.
         */
        post: operations["uploadMarkdownImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/group/{roomId}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디 그룹 참가
         * @description 초대받은 사용자가 해당 스터디 그룹에 참가합니다. 참가 후에는 SSE 연결을 통해 실시간 방 상태 및 타이머 이벤트를 수신할 수 있습니다.
         */
        post: operations["joinRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/group/{roomId}/exit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디 그룹 퇴장
         * @description 사용자가 현재 참여 중인 스터디 그룹에서 퇴장합니다.
         */
        post: operations["exitGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/group/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디 그룹 초대
         * @description roomId에 유저를 초대합니다.
         */
        post: operations["inviteUserToRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/group/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 스터디 그룹 생성
         * @description 스터디 그룹을 새로 생성합니다.
         */
        post: operations["createGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/{followeeId}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 팔로우 토글
         * @description 해당 사용자를 팔로우하거나 언팔로우합니다.
         */
        post: operations["toggleFollow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 코드 검증 */
        post: operations["verifyEmailCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/social-signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 소셜 간편 회원가입
         * @description 회원가입의 경우 두 가지로 나뉩니다. 해당 컨트롤러는 소셜 간편 회원가입 입니다.
         */
        post: operations["completeSignup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 자체 회원가입
         * @description 회원가입의 경우 두 가지로 나뉩니다. 해당 컨트롤러는 자체 회원가입 입니다.
         */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/send-email-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 코드 전송 */
        post: operations["sendEmailVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/restore-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 계정 복구
         * @description deleteAt에 값이 있었던 회원을 다시 null 값으로 되돌립니다.
         */
        post: operations["restoreUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/check-nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 닉네임 검증
         * @description 길이 및 빈값 검증을 합니다.
         */
        post: operations["checkNickname"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 닉네임 수정
         * @description 중복조회 및 형식 검사를 한 후 닉네임을 수정하는 기능입니다.
         */
        patch: operations["updateNickName"];
        trace?: never;
    };
    "/api/user/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 비밀번호 수정
         * @description 비밀번호 확인 후, 비밀번호 변경
         */
        patch: operations["updatePassword"];
        trace?: never;
    };
    "/api/posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 게시글 상세 조회
         * @description postId를 기반으로 게시글을 상세 조회합니다.
         */
        get: operations["getPostDetail"];
        put?: never;
        post?: never;
        /**
         * 게시글 삭제
         * @description 해당 게시글을 삭제합니다.
         */
        delete: operations["deletePost"];
        options?: never;
        head?: never;
        /** 게시글 제목/본문 수정 */
        patch: operations["updatePostContent"];
        trace?: never;
    };
    "/api/posts/{postId}/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 썸네일 이미지 수정 */
        patch: operations["updateThumbnail"];
        trace?: never;
    };
    "/api/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 댓글 삭제
         * @description 본인의 댓글을 삭제합니다.
         */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        /**
         * 댓글 수정
         * @description 본인의 댓글을 수정합니다.
         */
        patch: operations["updateComment"];
        trace?: never;
    };
    "/api/users/me/scraps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 스크랩한 게시글 조회
         * @description 내가 스크랩한 게시글 목록을 조회합니다.
         */
        get: operations["getScrappedPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내가 작성한 게시글 조회
         * @description 내가 작성한 게시글 목록을 조회합니다.
         */
        get: operations["getMyPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로워 피드
         * @description 내가 팔로우한 사람들의 게시글
         */
        get: operations["getFollowingFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 정보 조회
         * @description 특정 사용자의 프로필을 조회합니다.
         */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 조회
         * @description 현재 로그인된 사용자 정보 및 독서 기록 조회합니다.
         */
        get: operations["getMyProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sse/rooms/{roomId}/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * SSE 연결 - 스터디룸용
         * @description 스터디룸 타이머 이벤트 수신용 SSE 연결입니다.
         */
        get: operations["connectRoom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/tags/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 실시간 인기 태그 조회
         * @description 태그 검색 시 ZSet 기반으로 수집된 실시간 인기 태그를 조회합니다.
         */
        get: operations["getPopularTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/posts/title": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 제목 기반 게시글 검색
         * @description 게시글의 제목을 기준으로 키워드 검색을 수행합니다.
         */
        get: operations["searchByTitle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/posts/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 기반 게시글 검색
         * @description 지정된 태그를 기준으로 게시글 검색을 수행합니다.
         */
        get: operations["searchByTag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/posts/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내용 기반 게시글 검색
         * @description 게시글의 본문 내용을 기준으로 키워드 검색을 수행합니다. (캐싱 없음)
         */
        get: operations["searchByContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/posts/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 제목+내용 통합 게시글 검색
         * @description 제목 또는 내용 중 하나라도 키워드를 포함하는 게시글을 검색합니다. (캐싱 없음)
         */
        get: operations["searchByTitleOrContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/keywords/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 실시간 인기 검색어 조회
         * @description 검색 시 ZSet 기반으로 수집된 실시간 인기 키워드를 조회합니다.
         */
        get: operations["getPopularKeywords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/popular/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 인기 게시글 조회
         * @description ZSet 기반 인기 게시글을 조회합니다.
         */
        get: operations["getPopularPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 초대 알림 목록 조회
         * @description 현재 로그인한 사용자의 스터디 그룹 초대 알림을 조회합니다.
         */
        get: operations["getInviteNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info/temp-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 상태 확인
         * @description 임시 회원가입 절차 시, 임시 토큰의 만료여부 확인합니다
         */
        get: operations["checkTempToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 상태 확인
         * @description 현재 사용자의 인증 상태를 확인합니다.
         */
        get: operations["checkAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/followings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로잉 목록 조회
         * @description 내가 팔로우한 사용자 목록을 조회합니다.
         */
        get: operations["getFollowings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/follows/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 팔로워 목록 조회
         * @description 나를 팔로우한 사용자 목록을 조회합니다.
         */
        get: operations["getFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{commentId}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 대댓글 조회 (페이징)
         * @description 특정 루트 댓글의 대댓글을 페이징으로 조회합니다.
         */
        get: operations["getReplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 프로필 이미지 삭제
         * @description 사용자의 프로필 이미지를 기본 이미지로 변경합니다.
         */
        delete: operations["deleteProfileImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/images/{storageKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 마크다운 이미지 삭제
         * @description 마크다운 본문에서 사용된 임시 이미지를 삭제합니다. (post 에 연결되지 않은 경우만 삭제 가능)
         */
        delete: operations["deleteMarkdownImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/invites/{roomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 초대 알림 삭제
         * @description roomId에 대한 초대 알림을 삭제합니다. 보통 사용자가 초대를 거절하거나 처리 완료 시 사용합니다.
         */
        delete: operations["clearInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponseString: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: string;
        };
        BaseResponseEmpty: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["Empty"];
        };
        Empty: Record<string, never>;
        BaseResponseMyPageResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["MyPageResponseDTO"];
        };
        MonthlyReadingStatsResponseDTO: {
            /** Format: int32 */
            year: number;
            /** Format: int32 */
            month: number;
            /** Format: int32 */
            totalReadingTime: number;
            /** Format: int32 */
            readingCount: number;
            /** Format: double */
            averageReadingTime: number;
            mostFrequent?: boolean;
        };
        MyPageResponseDTO: {
            userProfile: components["schemas"]["UserProfileResponseDTO"];
            readingStats: components["schemas"]["ReadingStatsResponseDTO"];
            recentStudyHistories: components["schemas"]["StudyGroupHistoryDTO"][];
        };
        ReadingRecordResponseDTO: {
            /** Format: date */
            date: string;
            /** Format: int32 */
            colorLevel: number;
        };
        ReadingStatsResponseDTO: {
            /** Format: int32 */
            readingStreak: number;
            readingRecords: components["schemas"]["ReadingRecordResponseDTO"][];
            monthlyStats: components["schemas"]["MonthlyReadingStatsResponseDTO"][];
        };
        StudyGroupHistoryDTO: {
            title: string;
            content: string;
            /** Format: int32 */
            totalMinutes?: number;
            /** Format: date-time */
            createdAt: string;
            /** @enum {string} */
            status: "WAITING" | "RUNNING" | "ENDED" | "CANCELED";
            owner: components["schemas"]["UserBriefDTO"];
            participants: components["schemas"]["UserBriefDTO"][];
        };
        UserBriefDTO: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImageUrl?: string;
        };
        UserProfileResponseDTO: {
            /** Format: int64 */
            userId: number;
            nickname: string;
            profileImageUrlLarge: string;
            /** @enum {string} */
            tier: "BRONZE" | "SILVER" | "GOLD" | "PLATINUM";
            /** Format: int32 */
            point: number;
        };
        PostCreateRequestDTO: {
            title: string;
            contentMarkdown: string;
            tags: string[];
            thumbnailFileName: string;
        };
        BaseResponseLong: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            /** Format: int64 */
            result: number;
        };
        BaseResponseScrapResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["ScrapResponseDTO"];
        };
        ScrapResponseDTO: {
            scrapped?: boolean;
            /** Format: int64 */
            scrapCount?: number;
        };
        BaseResponseLikeResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["LikeResponseDTO"];
        };
        LikeResponseDTO: {
            liked?: boolean;
            /** Format: int64 */
            likeCount?: number;
        };
        CommentCreateRequestDTO: {
            content?: string;
            /** Format: int64 */
            parentId?: number;
        };
        BaseResponseCommentResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["CommentResponseDTO"];
        };
        CommentResponseDTO: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: int32 */
            depth?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            userProfileImageUrl?: string;
        };
        BaseResponseUploadImageResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["UploadImageResponseDTO"];
        };
        UploadImageResponseDTO: {
            url?: string;
            storageKey?: string;
        };
        GroupJoinRequestDTO: {
            /** Format: int64 */
            roomId: number;
            /** Format: int64 */
            targetUserId: number;
        };
        GroupCreateRequestDTO: {
            title: string;
            content: string;
        };
        EmailAuthVerificationDTO: {
            email: string;
            code: string;
        };
        SocialSignupDTO: {
            nickName: string;
            userPassword: string;
        };
        SignupDTO: {
            nickName: string;
            userEmail: string;
            userPassword: string;
        };
        EmailAuthDTO: {
            email: string;
        };
        NicknameRequestDTO: {
            nickName: string;
        };
        PasswordUpdateRequestDTO: {
            currentPassword: string;
            newPassword: string;
        };
        PostContentUpdateDTO: {
            title?: string;
            contentMarkdown?: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        BaseResponsePageResponsePostSummaryResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PageResponsePostSummaryResponseDTO"];
        };
        PageResponsePostSummaryResponseDTO: {
            content?: components["schemas"]["PostSummaryResponseDTO"][];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            last?: boolean;
        };
        PostSummaryResponseDTO: {
            /** Format: int64 */
            postId?: number;
            title?: string;
            /** Format: int64 */
            userId?: number;
            authorNickname?: string;
            /** Format: int64 */
            likeCount?: number;
            /** Format: int64 */
            scrapCount?: number;
            /** Format: date-time */
            createdAt?: string;
            thumbnailImageUrl?: string;
            profileImageUrl?: string;
            tagNames?: string[];
        };
        SseEmitter: {
            /** Format: int64 */
            timeout?: number;
        };
        BaseResponseListString: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: string[];
        };
        BaseResponsePostDetailResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PostDetailResponseDTO"];
        };
        PostDetailResponseDTO: {
            /** Format: int64 */
            postId?: number;
            title?: string;
            contentMarkdown?: string;
            authorNickname?: string;
            /** Format: int64 */
            likeCount?: number;
            /** Format: int64 */
            scrapCount?: number;
            /** Format: int64 */
            commentCount?: number;
            liked?: boolean;
            scrapped?: boolean;
            editable?: boolean;
            /** Format: date-time */
            createdAt?: string;
            thumbnailImageUrl?: string;
            profileImageUrl?: string;
            tagNames?: string[];
        };
        BaseResponsePageResponseRootCommentDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PageResponseRootCommentDTO"];
        };
        PageResponseRootCommentDTO: {
            content?: components["schemas"]["RootCommentDTO"][];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            last?: boolean;
        };
        RootCommentDTO: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            userProfileImageUrl?: string;
            /** Format: int32 */
            replyCount?: number;
        };
        BaseResponseListNotificationResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["NotificationResponseDTO"][];
        };
        NotificationResponseDTO: {
            groupName?: string;
            senderName?: string;
            /** Format: int64 */
            groupId?: number;
        };
        BaseResponsePageResponseFollowListResponseDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PageResponseFollowListResponseDTO"];
        };
        FollowListResponseDTO: {
            /** Format: int64 */
            userId?: number;
            nickName?: string;
            profileImageUrlSmall?: string;
            /** @enum {string} */
            tier?: "BRONZE" | "SILVER" | "GOLD" | "PLATINUM";
            /** Format: int32 */
            point?: number;
        };
        PageResponseFollowListResponseDTO: {
            content?: components["schemas"]["FollowListResponseDTO"][];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            last?: boolean;
        };
        BaseResponsePageResponseReplyCommentDTO: {
            success: boolean;
            /** Format: int32 */
            code: number;
            /** Format: int32 */
            httpStatus: number;
            message: string;
            result: components["schemas"]["PageResponseReplyCommentDTO"];
        };
        PageResponseReplyCommentDTO: {
            content?: components["schemas"]["ReplyCommentDTO"][];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            last?: boolean;
        };
        ReplyCommentDTO: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            userId?: number;
            userNickname?: string;
            userProfileImageUrl?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    uploadProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseString"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    savePersonalReadingRecord: {
        parameters: {
            query: {
                minutes: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    stopGroupTimer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    startGroupTimer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    resumeGroupTimer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    pauseGroupTimer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    heartbeat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseLong"];
                };
            };
        };
    };
    toggleScrap: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseScrapResponseDTO"];
                };
            };
        };
    };
    toggleLike: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseLikeResponseDTO"];
                };
            };
        };
    };
    getRootComments: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponseRootCommentDTO"];
                };
            };
        };
    };
    createComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseCommentResponseDTO"];
                };
            };
        };
    };
    uploadThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseUploadImageResponseDTO"];
                };
            };
        };
    };
    uploadMarkdownImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseUploadImageResponseDTO"];
                };
            };
        };
    };
    joinRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    exitGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    inviteUserToRoom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupJoinRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    createGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseLong"];
                };
            };
        };
    };
    toggleFollow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                followeeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    verifyEmailCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailAuthVerificationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    completeSignup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialSignupDTO"];
            };
        };
        responses: {
            /** @description 회원가입 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
            /** @description 임시 토큰이 만료되었습니다. 프론트엔드는 로그인 페이지로 리다이렉트해야 합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    sendEmailVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailAuthDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    restoreUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    checkNickname: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateNickName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NicknameRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordUpdateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    getPostDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePostDetailResponseDTO"];
                };
            };
        };
    };
    deletePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updatePostContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostContentUpdateDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    updateComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseCommentResponseDTO"];
                };
            };
        };
    };
    getScrappedPosts: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getMyPosts: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getFollowingFeed: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: {
                year?: number;
            };
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    getMyProfile: {
        parameters: {
            query?: {
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseMyPageResponseDTO"];
                };
            };
        };
    };
    connectRoom: {
        parameters: {
            query?: never;
            header?: {
                "Last-Event-ID"?: string;
            };
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["SseEmitter"];
                };
            };
        };
    };
    getPopularTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListString"];
                };
            };
        };
    };
    searchByTitle: {
        parameters: {
            query: {
                keyword: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    searchByTag: {
        parameters: {
            query: {
                tag: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    searchByContent: {
        parameters: {
            query: {
                keyword: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    searchByTitleOrContent: {
        parameters: {
            query: {
                keyword: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getPopularKeywords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListString"];
                };
            };
        };
    };
    getPopularPosts: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponsePostSummaryResponseDTO"];
                };
            };
        };
    };
    getInviteNotifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseListNotificationResponseDTO"];
                };
            };
        };
    };
    checkTempToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    checkAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    getFollowings: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponseFollowListResponseDTO"];
                };
            };
        };
    };
    getFollowers: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponseFollowListResponseDTO"];
                };
            };
        };
    };
    getReplies: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponsePageResponseReplyCommentDTO"];
                };
            };
        };
    };
    deleteProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseString"];
                };
            };
        };
    };
    deleteMarkdownImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storageKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
    clearInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roomId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BaseResponseEmpty"];
                };
            };
        };
    };
}
